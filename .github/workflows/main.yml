
# name: CICD

# on: [push]

# env:
#   #
#   API_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/src
#   NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx
#   REGISTRY: ghcr.io

# jobs:
#   build:
#     name: Build the Docker Image
#     runs-on: ubuntu-latest

#     steps:
#       - name: checkout main
#         uses: actions/checkout@v3
#       - name: Install Docker Compose
#         run: |
#           sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '"tag_name": "\K.*?(?=")')/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#           sudo chmod +x /usr/local/bin/docker-compose
#           docker-compose --version
#       - name: Set environment variables to .env
#         run: |
#           echo "API_IMAGE=$(echo ${{env.API_IMAGE}} )" >> $GITHUB_ENV
#           echo "NGINX_IMAGE=$(echo ${{env.NGINX_IMAGE}} )" >> $GITHUB_ENV
#       - name: Log in to GitHub Packages
#         env:
#           PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#         run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin

#       - name: Pull images
#         run: |
#           docker pull ${{ env.API_IMAGE }} || true
#           docker pull ${{ env.NGINX_IMAGE }} || true
#       - name: Build images
#         id: build-images
#         run: |
#           docker-compose -f docker-compose.ci.yml build
#       - name: Push images
#         run: |
#           docker push ${{ env.API_IMAGE }}
#           docker push ${{ env.NGINX_IMAGE }}
#   checking-secrets:
#     name: Checking secrets
#     runs-on: ubuntu-latest
#     needs: build
#     outputs:
#       secret_key_exists: ${{steps.check_secrets.outputs.defined}}
#     steps:
#       - name: Check for Secrets availabilities
#         id: check_secrets
#         shell: bash
#         run: |
#           if [[ -n "${{ secrets.PRIVATE_KEY }}" && -n "${{secrets.AWS_EC2_IP_ADDRESS}}" && -n "${{secrets.AWS_HOST_USER}}" ]]; then
#             echo "defined=true" >> $GITHUB_OUTPUT;
#           else
#             echo "defined=false" >> $GITHUB_OUTPUT;
#           fi
#   deploy:
#     name: Deploy to AWS EC2
#     runs-on: ubuntu-latest
#     needs: checking-secrets
#     if: needs.checking-secrets.outputs.secret_key_exists == 'true'
#     steps:
#       - name: Checkout main
#         uses: actions/checkout@v3

#       - name: Add environment variables to .env
#         run: |
#           echo API_IMAGE=${{ env.API_IMAGE }} >> .env
#           echo NGINX_IMAGE=${{ env.NGINX_IMAGE }} >> .env
#           echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
#           echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
#       - name: Add the private SSH key to the ssh-agent
#         env:
#           SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#         run: |
#           mkdir -p ~/.ssh
#           ssh-agent -a $SSH_AUTH_SOCK > /dev/null
#           ssh-keyscan github.com >> ~/.ssh/known_hosts
#           ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
#       - name: Deploy images on AWS EC2
#         env:
#           SSH_AUTH_SOCK: /tmp/ssh_agent.sock

#         run: |
#           scp -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml ${{secrets.AWS_HOST_USER}}@${{ secrets.AWS_EC2_IP_ADDRESS }}:
#           ssh -o StrictHostKeyChecking=no ${{secrets.AWS_HOST_USER}}@${{ secrets.AWS_EC2_IP_ADDRESS }} << EOF
#               docker-compose down --rmi all -v
#               docker login ghcr.io -u ${{secrets.NAMESPACE}} -p ${{secrets.PERSONAL_ACCESS_TOKEN}}
#               docker pull $API_IMAGE
#               docker pull $NGINX_IMAGE
#               docker-compose --env-file=.env -f docker-compose.prod.yml up -d --build
#               docker logout
#           EOF

name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@master

    - name: create env file
      run: |
        touch .env
        echo "${{ secrets.ENV_VARS }}" >> .env

    - name: create remote directory
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.KEY }}
        script: mkdir -p /home/ubuntu/srv/ubuntu

    - name: copy source via ssh key
      uses: burnett01/rsync-deployments@4.1
      with:
        switches: -avzr --delete
        remote_path: /home/ubuntu/srv/ubuntu/
        remote_host: ${{ secrets.HOST }}
        remote_user: ubuntu
        remote_key: ${{ secrets.KEY }}

    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ubuntu
        key: ${{ secrets.KEY }}
        script: |
          sh /home/ubuntu/srv/ubuntu/config/scripts/deploy.sh